#define CATCH_CONFIG_MAIN // This tells Catch to provide a main() - only do this in one cpp file
#include "entropy.h"
#include "catch2/catch.hpp"

TEST_CASE( "Entropy leaving empty cells is tested", "[entropy]") {
    std::vector<double>  t(4,0.0);
    REQUIRE(std::fabs(dropsize(t, 2)<=1e-8));
    double ent=0.693147;
    t[1]=0.5;
    t[0]=0.5;
    REQUIRE(std::fabs(dropsize(t,2)-0.5)<=1e-6);
    REQUIRE(std::fabs(Entropy(ent, 0, 1, 2, 3, t, 4, 2)-ent)<=1e-6);

TEST_CASE( "Entropy Condition", "[entropy]") {
        double Entropy = 0;

        for (int i = 0; i < config.gridsize*config.gridsize; i++){

            Cells[i] = 0;

        }

        for (int i = 0; i < config.nmolecules; i++){

            Particles[i].position[0] = 0;
            Particles[i].position[1] = 0;
            m = Particles[i].Getcell(config);
            Cells[m] += 1;

        }

        Entropy = entropy(config, Cells);

        REQUIRE (Entropy == 0);

    }
}
TEST_CASE( "Number Of Particles", "[entropy]") {
int sum = 0;     

        for (int i = 0; i < config.gridsize*config.gridsize; i++){

            sum += Cells[i];

        }

        REQUIRE (sum == config.nmolecules);

        Particles[0].position[0] = -config.latticesize/2;    //Esquina inferior izquierda del grid
        Particles[0].position[1] = -config.latticesize/2;

        m = Particles[0].Getcell(config);

        REQUIRE (m == 0);

        Particles[0].position[0] = config.latticesize/2 - 1;    //Esquina superior derecha del grid
        Particles[0].position[1] = config.latticesize/2 - 1;

        m = Particles[0].Getcell(config);

        REQUIRE (m == config.gridsize*config.gridsize - 1);

        int random_particle = 0, step = 0, direction = 0;

        for (int t = 0; t <= 50; t++){

            random_particle = dis_particle(gen);     
            step = dis_move(gen)*2 - 1;  
            direction = dis_move(gen);

            time_step(config, random_particle, step, direction, Cells, Particles);

        }

        sum = 0;

        for (int i = 0; i < config.gridsize*config.gridsize; i++){

            sum += Cells[i];

        }

        REQUIRE (sum == config.nmolecules);
        
} 
TEST_CASE( "Distance of particle from the origin", "[entropy]") {

}   
